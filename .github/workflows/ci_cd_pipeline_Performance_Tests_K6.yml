name: Dockerized Load Test Execution

on:
  workflow_dispatch:  # Manual trigger only
  schedule:
    - cron: '30 6 * * *'
  push:
    branches: [main, master, dev]
  pull_request:
    branches: [main, master, dev]

jobs:
  load-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- Infrastructure Setup ---
      - name: Start services
        run: |
          docker compose -f docker compose -f docker-compose.yml up -d --build
          docker compose ps

      - name: Wait for InfluxDB
        run: |
          timeout 60 bash -c 'until docker compose exec influxdb influx -execute "SHOW DATABASES"; do sleep 2; done'

      # --- SSH Tunneling Setup ---
      - name: Configure SSH access
        if: github.event_name == 'workflow_dispatch'
        run: |
          sudo apt-get update
          sudo apt-get install -y openssh-server curl
          echo "runner:${{ secrets.SSH_PASSWORD }}" | sudo chpasswd
          sudo sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
          sudo service ssh start
          
          RUNNER_IP=$(curl -s ifconfig.me)
          echo "RUNNER_IP=$RUNNER_IP" >> $GITHUB_ENV
          echo "SSH_COMMAND=ssh -L 3002:localhost:3002 runner@$RUNNER_IP" >> $GITHUB_ENV
          echo "GRAFANA_URL=http://localhost:3002" >> $GITHUB_ENV

      - name: Display connection info
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "🛠️ Connect to runner:"
          echo "${{ env.SSH_COMMAND }}"
          echo "🌐 Grafana URL: ${{ env.GRAFANA_URL }}"
          echo "🔑 SSH Password: ${{ secrets.SSH_PASSWORD }}"
          echo "📌 Runner IP: ${{ env.RUNNER_IP }}"

      # --- Test Execution ---
      - name: Run k6 tests
        run: docker compose up --build k6

      # --- Debug Artifacts ---
      - name: Save test summary
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            ./load-test-results/summary.json
            ./load-test-results/

      - name: Capture failure logs
        if: failure()
        run: |
          docker compose logs --no-color > all-logs.txt
          docker compose logs --no-color k6 > k6.log
        continue-on-error: true

      - name: Upload logs
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: debug-logs
          path: |
            all-logs.txt
            k6.log

      - name: Cleanup
        if: always()
        run: docker compose down -v