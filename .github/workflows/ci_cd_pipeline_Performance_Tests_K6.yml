name: Dockerized Load Test Execution

on:
  schedule:
    - cron: '30 6 * * *'  # Daily at 06:30 UTC
  push:
    branches:
      - main
      - master
      - dev
      - feature
  pull_request:
    branches:
      - main
      - master
      - dev
      - feature

jobs:
  load-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Start infrastructure with Docker Compose
        run: |
          mkdir -p ./load-test-results
          docker compose -f docker-compose.yml up -d --build
          docker compose ps

      - name: Wait for InfluxDB to be ready
        run: |
          timeout 60 bash -c \
            'until docker compose exec influxdb influx -execute "SHOW DATABASES"; do sleep 2; done'

      - name: Configure SSH access and display connection info
        run: |
          sudo apt-get update
          sudo apt-get install -y openssh-server curl
          echo "runner:YOUR_SSH_PASSWORD" | sudo chpasswd
          sudo sed -i \
            's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' \
            /etc/ssh/sshd_config
          sudo service ssh start
          RUNNER_IP=$(curl -s ifconfig.me)
          echo "🛠️ Connect to runner: ssh -L 3002:localhost:3002 runner@$RUNNER_IP"
          echo "🌐 Grafana URL: http://localhost:3002"
          echo "🔑 SSH Password: YOUR_SSH_PASSWORD"
          echo "📌 Runner IP: $RUNNER_IP"

      - name: Run k6 load test
        run: |
          docker compose up --build k6

      - name: Check Grafana API
        run: |
          echo "Testing Grafana health..."
          curl -s http://localhost:3002/api/health | jq .
          curl -s http://admin:admin@localhost:3002/api/datasources | jq .

      - name: Export InfluxDB Data
        if: always()
        run: |
          docker compose exec influxdb influx \
            -database k6 \
            -execute "SELECT * FROM /.*/" \
            -format json > influx-export.json

      - name: Capture Grafana Screenshot
        if: always()
        run: |
          docker run --network host --rm mcr.microsoft.com/playwright:v1.52.0-jammy \
            sh -c "npx playwright screenshot http://localhost:3002 grafana.png"
            

      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-artifacts
          path: |
            ./load-test-results/summary.json
            influx-export.json
            grafana.png

      - name: Capture Logs on Failure
        if: failure()
        run: |
          docker compose logs --no-color > all-logs.txt
          docker compose logs --no-color k6 > k6-detailed.log
          docker compose exec influxdb influx \
            -database k6 \
            -execute "SHOW SERIES" > influxdb-series.txt

      - name: Upload Failure Logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: failure-logs
          path: |
            all-logs.txt
            k6-detailed.log
            influxdb-series.txt

      - name: Cleanup
        if: always()
        run: docker compose down -v
